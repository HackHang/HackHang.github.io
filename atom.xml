<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Welcome to    电子俱乐部</title>
  
  
  <link href="https://hackhang.github.io/atom.xml" rel="self"/>
  
  <link href="https://hackhang.github.io/"/>
  <updated>2021-07-20T07:23:17.089Z</updated>
  <id>https://hackhang.github.io/</id>
  
  <author>
    <name>JiangTao</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>回溯</title>
    <link href="https://hackhang.github.io/2021/07/20/%E5%9B%9E%E6%BA%AF/"/>
    <id>https://hackhang.github.io/2021/07/20/%E5%9B%9E%E6%BA%AF/</id>
    <published>2021-07-20T04:08:00.000Z</published>
    <updated>2021-07-20T07:23:17.089Z</updated>
    
    <content type="html"><![CDATA[<h1 id="回溯"><a href="#回溯" class="headerlink" title="回溯"></a>回溯</h1><p>回溯是一个试错的算法，他尝试分步解决一个问题，当发现没有正确答案或者答案已经穷尽时，就会回头，恢复初始状态，再进行尝试！</p><p>回溯可以用递归进行实现！</p><h2 id="拿排列组合进行举例说明："><a href="#拿排列组合进行举例说明：" class="headerlink" title="拿排列组合进行举例说明："></a>拿排列组合进行举例说明：</h2><p>给你一个字符串，打印其所有排列组合的可能性（剑指offer38），不能重复！</p><p>分析：</p><p>在高中的时候排列组合的可能性通常使用空房子来说明。</p><p>现有一个字符串“abc”，它的排列组合怎么求？</p><p>先假设有三个空房子：</p><img src="/2021/07/20/%E5%9B%9E%E6%BA%AF/image-20210720105017557.png" class title="This is an example image"><p>第一个空房子可以放abc中的任意一个，为了有次序的放置，我们先放a</p><img src="/2021/07/20/%E5%9B%9E%E6%BA%AF/image-20210720105411609.png" class title="This is an example image"><p>由于不能重复，我们需要暂时把a禁掉，剩下的就只有bc了，以此类推，第二个可以先放b，那么最后一个就放置c</p><img src="/2021/07/20/%E5%9B%9E%E6%BA%AF/image-20210720105535975.png" class title="This is an example image"><p>这是一种，当这个排序完成时，我们就需要回溯了，回到上一个状态，也就是只有a和两个空房子的状态，因为之前我们把bc都禁掉了，所以<strong>不要忘记解封</strong>！还需要把他们从房子里面踢出去，因为我们还是在a不动的基础上回溯，所以不会再新建三个空房子，所以需要腾出空间。</p><img src="/2021/07/20/%E5%9B%9E%E6%BA%AF/image-20210720105411609.png" class title="This is an example image"><p>那么第二轮，由于刚才bc之间先放的b，这次我们先放c，那么第三个就是放b了</p><img src="/2021/07/20/%E5%9B%9E%E6%BA%AF/image-20210720110043805.png" class title="This is an example image"><p>从上可以总结出，每次的跑的路线其实一样，首先看哪个没有被禁，把第一个没有被禁放进去，然后禁掉这个已经放置的，然后进去下一个循环，下一个还是判断谁没有被禁，然后放置第一个，等三个房子都被放进后，回溯到上一层，这时就要把之前的解禁，恢复到之前的转态！</p><p>蒙蒙的话看图：</p><img src="/2021/07/20/%E5%9B%9E%E6%BA%AF/image-20210720112629593.png" class title="This is an example image"><p>回溯的过程中，注意解封</p><img src="/2021/07/20/%E5%9B%9E%E6%BA%AF/image-20210720113112303.png" class title="This is an example image"><p>第一次先放的b，这次放c</p><img src="/2021/07/20/%E5%9B%9E%E6%BA%AF/image-20210720113312981.png" class title="This is an example image"><p>满了就回到三个空房子状态了，开始先放b</p><img src="/2021/07/20/%E5%9B%9E%E6%BA%AF/image-20210720113432324.png" class title="This is an example image"><p>下面是代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    Set&lt;String&gt; list = <span class="keyword">new</span> HashSet&lt;&gt;();<span class="comment">//不重复</span></span><br><span class="line">    <span class="keyword">public</span> String[] permutation(String s) &#123;</span><br><span class="line">        HuiSu(s.toCharArray(),<span class="keyword">new</span> StringBuffer(),<span class="keyword">new</span> <span class="keyword">boolean</span>[s.length()]);</span><br><span class="line">        <span class="keyword">return</span> list.toArray(<span class="keyword">new</span> String[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">HuiSu</span><span class="params">(<span class="keyword">char</span>[] ch,StringBuffer sb, <span class="keyword">boolean</span>[] visited)</span></span>&#123;<span class="comment">//visited数组，就是1或者0的标识</span></span><br><span class="line">        <span class="keyword">if</span>(sb.length() == ch.length)&#123;<span class="comment">//判断空房子满了没有</span></span><br><span class="line">            list.add(sb.toString());<span class="comment">//满了的话就把完整的字符串加进去</span></span><br><span class="line">            <span class="keyword">return</span>;<span class="comment">//回溯</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;ch.length;i++)&#123;<span class="comment">//按顺序放</span></span><br><span class="line">            <span class="keyword">if</span>(visited[i])<span class="keyword">continue</span>;<span class="comment">//如果被禁了就跳出一层</span></span><br><span class="line">            sb.append(ch[i]);<span class="comment">//把没有被禁的第一个放进去</span></span><br><span class="line">            visited[i]=<span class="keyword">true</span>;<span class="comment">//禁掉刚放进去的一个</span></span><br><span class="line">            HuiSu(ch,sb,visited);<span class="comment">//放进去一个进入到Huisu函数再放下一个</span></span><br><span class="line">            sb.deleteCharAt(sb.length()-<span class="number">1</span>);<span class="comment">//结束后删掉刚放进的那个</span></span><br><span class="line">            visited[i]=<span class="keyword">false</span>;<span class="comment">//把刚放进去的那一个解禁</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;回溯&quot;&gt;&lt;a href=&quot;#回溯&quot; class=&quot;headerlink&quot; title=&quot;回溯&quot;&gt;&lt;/a&gt;回溯&lt;/h1&gt;&lt;p&gt;回溯是一个试错的算法，他尝试分步解决一个问题，当发现没有正确答案或者答案已经穷尽时，就会回头，恢复初始状态，再进行尝试！&lt;/p&gt;
&lt;p&gt;回溯</summary>
      
    
    
    
    <category term="算法" scheme="https://hackhang.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>动态代理</title>
    <link href="https://hackhang.github.io/2021/06/21/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/"/>
    <id>https://hackhang.github.io/2021/06/21/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/</id>
    <published>2021-06-21T14:17:18.000Z</published>
    <updated>2021-06-21T14:19:38.402Z</updated>
    
    <content type="html"><![CDATA[<h2 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h2><p>为什么要学习代理模式？因为这是SpringAop的底层！</p><p>代理模式的分类：</p><ul><li>静态代理</li><li>动态代理</li></ul><p>代码：</p><ol><li><p>接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Rent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rent</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>真实角色</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Host</span> <span class="keyword">implements</span> <span class="title">Rent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;chuzu&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>代理角色</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Proxy</span> <span class="keyword">implements</span> <span class="title">Rent</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Host host;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Proxy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Proxy</span><span class="params">(Host host)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.host = host;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        host.rent();</span><br><span class="line">        hetong();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hetong</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hetong!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>客户端访问代理角色</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Proxy p = <span class="keyword">new</span> Proxy(<span class="keyword">new</span> Host());</span><br><span class="line">        p.rent();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>代理模式的好处：</p><ul><li>可以使真实的角色的操作更加纯粹！不用去关注一些公共业务</li><li>公共也就交给代理角色！实现了业务的分工</li><li>公共业务发生拓展的时候，方便集中管理</li></ul><p>缺点：一个真实角色就会产生一个代理角色：代码量会翻倍~开发效率会变低</p><p><strong>AOP实现机制！！</strong></p><p>加一个代理</p><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/5164775b-2dbb-480e-ab3c-3c1e87a0d434/Untitled.png" alt="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/5164775b-2dbb-480e-ab3c-3c1e87a0d434/Untitled.png"></p><h2 id="10-2-动态代理"><a href="#10-2-动态代理" class="headerlink" title="10.2 动态代理"></a>10.2 动态代理</h2><ul><li><p>动态代理和静态代理角色一样</p></li><li><p>动态代理的代理类是动态生成的，不是我们直接写好的！</p></li><li><p>动态代理分为两大类：基于接口的动态代理，基于类的动态代理</p><p>基于接口——JDK动态代理</p><p>基于类：cglib</p><p>java字节码实现：javasist</p></li></ul><p>需要了解两个类：Proxy：代理，InvocationHandler：调用处理</p><p><img src="/2021/06/21/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/BLOG\blogg\source_posts\动态代理\1.png" alt="1"></p><p>动态代理的好处</p><ul><li>可以使真实的角色的操作更加纯粹！不用去关注一些公共业务</li><li>公共也就交给代理角色！实现了业务的分工</li><li>公共业务发生拓展的时候，方便集中管理</li><li>一个动态代理类代理的是一个 接口，一般就是对应的一类业务</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;代理模式&quot;&gt;&lt;a href=&quot;#代理模式&quot; class=&quot;headerlink&quot; title=&quot;代理模式&quot;&gt;&lt;/a&gt;代理模式&lt;/h2&gt;&lt;p&gt;为什么要学习代理模式？因为这是SpringAop的底层！&lt;/p&gt;
&lt;p&gt;代理模式的分类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;静态代理</summary>
      
    
    
    
    <category term="Java" scheme="https://hackhang.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>装机</title>
    <link href="https://hackhang.github.io/2021/06/03/%E8%A3%85%E6%9C%BA/"/>
    <id>https://hackhang.github.io/2021/06/03/%E8%A3%85%E6%9C%BA/</id>
    <published>2021-06-03T02:51:52.000Z</published>
    <updated>2021-06-03T02:52:50.452Z</updated>
    
    <content type="html"><![CDATA[<p>导师</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;导师&lt;/p&gt;
</summary>
      
    
    
    
    
    <category term="PC" scheme="https://hackhang.github.io/tags/PC/"/>
    
  </entry>
  
  <entry>
    <title>万魔舒适豆降噪版个人主观体验</title>
    <link href="https://hackhang.github.io/2021/04/22/%E4%B8%87%E9%AD%94%E8%88%92%E9%80%82%E8%B1%86%E9%99%8D%E5%99%AA%E7%89%88%E4%B8%AA%E4%BA%BA%E4%B8%BB%E8%A7%82%E4%BD%93%E9%AA%8C/"/>
    <id>https://hackhang.github.io/2021/04/22/%E4%B8%87%E9%AD%94%E8%88%92%E9%80%82%E8%B1%86%E9%99%8D%E5%99%AA%E7%89%88%E4%B8%AA%E4%BA%BA%E4%B8%BB%E8%A7%82%E4%BD%93%E9%AA%8C/</id>
    <published>2021-04-22T06:18:40.000Z</published>
    <updated>2021-04-23T12:39:07.414Z</updated>
    
    <content type="html"><![CDATA[<p>自用的AirPods变成了Air，找不到了:cry:。旧的不去新的不来，正好弄个带降噪的:laughing:  看了看才发现2021年降噪耳机爆炸，把价格区间设在1000元以下，逛了逛各大平台，发现几个还不错的耳机：<strong>万魔舒适豆降噪版</strong>，<strong>OPPO ENCO X</strong>，<strong>FIIL CC PRO</strong>。这里面降噪深度万魔是<strong>40db</strong>，FIIL是<strong>39db</strong>，OPPO是<strong>35db</strong>，去b站看评测还不错，<strong>pdd</strong>果断入手。</p><h2 id="外观"><a href="#外观" class="headerlink" title="外观"></a>外观</h2><p>开箱（杰伦：爷青回）：</p><p><img src="/2021/04/22/%E4%B8%87%E9%AD%94%E8%88%92%E9%80%82%E8%B1%86%E9%99%8D%E5%99%AA%E7%89%88%E4%B8%AA%E4%BA%BA%E4%B8%BB%E8%A7%82%E4%BD%93%E9%AA%8C/IMG_20210421_175046.jpg" alt="IMG_20210421_175046"></p><p><img src="/2021/04/22/%E4%B8%87%E9%AD%94%E8%88%92%E9%80%82%E8%B1%86%E9%99%8D%E5%99%AA%E7%89%88%E4%B8%AA%E4%BA%BA%E4%B8%BB%E8%A7%82%E4%BD%93%E9%AA%8C/BLOG\blogg\source_posts\万魔舒适豆降噪版个人主观体验\IMG_20210421_175046.jpg" alt="IMG_20210421_175046"></p><p>第一次用万魔的产品，觉得包装还是用心的，翻盖（是叫翻盖吧:dog: ）设计，挺有分量感的，俗话说，金玉其表，额。。。，里面也很精致！</p><p><img src="/2021/04/22/%E4%B8%87%E9%AD%94%E8%88%92%E9%80%82%E8%B1%86%E9%99%8D%E5%99%AA%E7%89%88%E4%B8%AA%E4%BA%BA%E4%B8%BB%E8%A7%82%E4%BD%93%E9%AA%8C/BLOG\blogg\source_posts\万魔舒适豆降噪版个人主观体验\IMG_20210421_105608.jpg" alt="IMG_20210421_105608"></p><p><img src="/2021/04/22/%E4%B8%87%E9%AD%94%E8%88%92%E9%80%82%E8%B1%86%E9%99%8D%E5%99%AA%E7%89%88%E4%B8%AA%E4%BA%BA%E4%B8%BB%E8%A7%82%E4%BD%93%E9%AA%8C/BLOG\blogg\source_posts\万魔舒适豆降噪版个人主观体验\IMG_20210421_175216.jpg" alt="IMG_20210421_175216"></p><h2 id="佩戴体验"><a href="#佩戴体验" class="headerlink" title="佩戴体验"></a>佩戴体验</h2><p>上一个耳机戴的是AirPods，佩戴体验相当不错，唯一的缺点就是我佩戴的时候不牢固，容易掉，吃饭的时候也没办法戴，因为咀嚼的时候颌骨会不停的动以至于好像有股力想把耳机从耳朵里面推出来，但是万魔的这款耳机佩戴很舒适，没有异物感，长时间佩戴也没事，不会让你有掉出来的感觉（AirPods老是感觉快掉出来），舒适豆货真价实。</p><p>下载万魔APP，写着打开耳机盒自动链接，？？？，怎么没连接，也搜不到蓝牙，搞了半天以为坏了，后来发现原来得撕掉耳机头上的一层覆膜，salute！</p><p><img src="/2021/04/22/%E4%B8%87%E9%AD%94%E8%88%92%E9%80%82%E8%B1%86%E9%99%8D%E5%99%AA%E7%89%88%E4%B8%AA%E4%BA%BA%E4%B8%BB%E8%A7%82%E4%BD%93%E9%AA%8C/BLOG\blogg\source_posts\万魔舒适豆降噪版个人主观体验\IMG_20210421_105735.jpg" alt="IMG_20210421_105735"></p><p>处于连接状态的时候。尾巴会亮，连接上以后就会消失。连接速度很快，好评。给了一年会员，聊胜于无。</p><p><img src="/2021/04/22/%E4%B8%87%E9%AD%94%E8%88%92%E9%80%82%E8%B1%86%E9%99%8D%E5%99%AA%E7%89%88%E4%B8%AA%E4%BA%BA%E4%B8%BB%E8%A7%82%E4%BD%93%E9%AA%8C/BLOG\blogg\source_posts\万魔舒适豆降噪版个人主观体验\Screenshot_20210421_113233.jpg" alt="Screenshot_20210421_113233"></p><p>看评测的时候说有<strong>弹窗</strong>，于是，关上盒子，然后又打开，弹了个寂寞，后来发现必须得在APP实验室里面打开这个功能才可以，然后就这样了（下图），但是有一个问题就是弹窗的动画不太丝滑，有点掉帧:dog:</p><p><img src="/2021/04/22/%E4%B8%87%E9%AD%94%E8%88%92%E9%80%82%E8%B1%86%E9%99%8D%E5%99%AA%E7%89%88%E4%B8%AA%E4%BA%BA%E4%B8%BB%E8%A7%82%E4%BD%93%E9%AA%8C/BLOG\blogg\source_posts\万魔舒适豆降噪版个人主观体验\Screenshot_20210421_114137.jpg" alt="Screenshot_20210421_114137"></p><h2 id="玄学时间（音质）"><a href="#玄学时间（音质）" class="headerlink" title="玄学时间（音质）"></a>玄学时间（音质）</h2><p>连接以后，第一件事就是听首歌，大风吹走起（下图），下面是主观评价部分：</p><p><strong>音质到位</strong>，虽然是acc协议，听起来还是挺带感的，低音足，中音准，高音有点拉跨，有智能入耳检测，自动暂停和播放。总体来说<strong>值！</strong></p><p><img src="/2021/04/22/%E4%B8%87%E9%AD%94%E8%88%92%E9%80%82%E8%B1%86%E9%99%8D%E5%99%AA%E7%89%88%E4%B8%AA%E4%BA%BA%E4%B8%BB%E8%A7%82%E4%BD%93%E9%AA%8C/BLOG\blogg\source_posts\万魔舒适豆降噪版个人主观体验\Screenshot_20210421_113509.jpg" alt="Screenshot_20210421_113509"></p><h2 id="降噪"><a href="#降噪" class="headerlink" title="降噪"></a>降噪</h2><p>重头戏，买它就是为了他吹的降噪，首先是在不放歌的情况下，五种模式（关闭，强档，均衡，通透，抗风噪）<strong>均无底噪</strong>，人在学校，选了三个场景：宿舍，实验室，食堂（<strong>以下都是强降噪模式</strong>）。</p><p>1.宿舍里面：（1）不放音乐的时候，你舍友打呼噜的声音或者玩游戏的声音还是能听到的，只是声音小点，我把它理解为被动降噪效果（耳塞效果），低频声音基本被过滤干净了，洗衣机的声音还是可以听到，效果和人声差不多。（2）放音乐的时候，90%的声音都听不见了，我听音乐的音量比较小，有时候还是可以听到一点声音，关系不大。</p><p>2.实验室：实验室声音来源，脚步声，挪椅子声，键盘声，人声。不放音乐的情况下，都被减弱，都不能完全消除；放音乐的情况下，与世隔绝。</p><p>3.食堂：在食堂里面降噪效果还是比较明显的，因为这个场景比其他两个场景都要嘈杂，当你戴上耳机，打开降噪的一瞬间，你会觉得awesome！80%的声音都被干掉，然后你打开抖音，NICE！</p><p>4.抗风噪效果不错，开启之后风噪明显变小。</p><p>5.通透模式好评，打开以后和不戴耳机一样，没有耳压，对话交流无障碍</p><p>6、强降噪和均衡有耳压，其余没有</p><p>总结：我带的降噪耳机比较少，之前有过索尼WH-1000XM3，在苹果店体验过AirPods Pro（体验时间短就不说了），之前戴WH-1000XM3，它的降噪效果我是不怎么满意的，上面的三个场景效果和万魔（感觉40db有水分:ocean: ）的这个差不多，但是它贵啊，能买三个万魔了:laughing:,低频可以过滤干净，高频不行（降噪耳机通病，反向波频达不到这么快），要是想降噪降得一干二净，还是不现实，万魔的降噪效果我本人是满意的。芜湖！</p><h2 id="延迟"><a href="#延迟" class="headerlink" title="延迟"></a>延迟</h2><p>买之前，看他们说万魔的这个延迟大，我也是一个游戏玩家，当时是担心的，出于降噪和价格（主要是价格）还是入手了。</p><p>音乐：2021年了，音乐当然没有问题。</p><p>视频：经酷友提醒，评测了爱奇艺，我这木耳果然感觉不到延迟。。。不知道是中奖了还是怎么了，b站也没延迟。。。但是看视频的时候暂停和播放的时候还是有延迟的，之后就没事了。</p><p>游戏：仅仅试了试王者，这是我唯一能感觉出延迟的地方，玩的李白，普攻以后极短的时间后才会听到声音，有延迟但是不影响游戏体验，见仁见智吧，反正技术在那，咋玩都能赢:dog:.</p><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><p>1.续航时间很长，官方宣称耳机开降噪6个小时，关降噪8个，实测靠谱。 </p><p>2.降噪值这个价，效果不错</p><p>3.虽然没有弹窗但是连接快且稳定，没有出现断连</p><p>4.佩戴舒适，这个真的很重要，侧躺在床上也不硌</p><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ol><li>弹窗鸡肋，一是不灵敏，时有时无。二是不流畅，掉帧。</li><li>强降噪和均衡模式效果几乎无差，不知道什么原因，是强档太拉还是均衡太强。</li><li>我用手机自带的录音软件，进行耳机通话测试，声音很小，但是打电话的时候也不影响，也没说我声音太小之类的，让我怀疑我的测试方法有问题。</li></ol><p>以上是关于这款耳机的体验。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;自用的AirPods变成了Air，找不到了:cry:。旧的不去新的不来，正好弄个带降噪的:laughing:  看了看才发现2021年降噪耳机爆炸，把价格区间设在1000元以下，逛了逛各大平台，发现几个还不错的耳机：&lt;strong&gt;万魔舒适豆降噪版&lt;/strong&gt;，&lt;st</summary>
      
    
    
    
    <category term="科技体验" scheme="https://hackhang.github.io/categories/%E7%A7%91%E6%8A%80%E4%BD%93%E9%AA%8C/"/>
    
    
    <category term="耳机" scheme="https://hackhang.github.io/tags/%E8%80%B3%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>使用hexo搭建个人免费博客（2021小白向）</title>
    <link href="https://hackhang.github.io/2021/04/19/%E4%BD%BF%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%85%8D%E8%B4%B9%E5%8D%9A%E5%AE%A2(2021%E5%B0%8F%E7%99%BD%E5%90%91)/"/>
    <id>https://hackhang.github.io/2021/04/19/%E4%BD%BF%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%85%8D%E8%B4%B9%E5%8D%9A%E5%AE%A2(2021%E5%B0%8F%E7%99%BD%E5%90%91)/</id>
    <published>2021-04-19T06:21:09.000Z</published>
    <updated>2021-04-19T07:38:50.525Z</updated>
    
    <content type="html"><![CDATA[<h1 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续"></a>未完待续</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;未完待续&quot;&gt;&lt;a href=&quot;#未完待续&quot; class=&quot;headerlink&quot; title=&quot;未完待续&quot;&gt;&lt;/a&gt;未完待续&lt;/h1&gt;</summary>
      
    
    
    
    <category term="博客" scheme="https://hackhang.github.io/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
    <category term="tag" scheme="https://hackhang.github.io/tags/tag/"/>
    
  </entry>
  
</feed>
